//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "post_like_db_models")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub post_id: String,
    pub user_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::post_db_models::Entity",
        from = "Column::PostId",
        to = "super::post_db_models::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PostDbModels,
    #[sea_orm(
        belongs_to = "super::user_db_models::Entity",
        from = "Column::UserId",
        to = "super::user_db_models::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    UserDbModels,
}

impl Related<super::post_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostDbModels.def()
    }
}

impl Related<super::user_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserDbModels.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
