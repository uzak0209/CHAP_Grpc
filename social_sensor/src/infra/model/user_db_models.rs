//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_db_models")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub image: Option<String>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub follower_count: Option<i32>,
    pub following_count: Option<i32>,
    pub valid: Option<bool>,
    pub deleted_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::auth_db_models::Entity")]
    AuthDbModels,
    #[sea_orm(has_many = "super::comment_db_models::Entity")]
    CommentDbModels,
    #[sea_orm(has_many = "super::event_db_models::Entity")]
    EventDbModels,
    #[sea_orm(has_many = "super::event_like_db_models::Entity")]
    EventLikeDbModels,
    #[sea_orm(has_many = "super::post_db_models::Entity")]
    PostDbModels,
    #[sea_orm(has_many = "super::post_like_db_models::Entity")]
    PostLikeDbModels,
    #[sea_orm(has_many = "super::spot_db_models::Entity")]
    SpotDbModels,
    #[sea_orm(has_many = "super::thread_db_models::Entity")]
    ThreadDbModels,
    #[sea_orm(has_many = "super::thread_like_db_models::Entity")]
    ThreadLikeDbModels,
}

impl Related<super::auth_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthDbModels.def()
    }
}

impl Related<super::comment_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommentDbModels.def()
    }
}

impl Related<super::event_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventDbModels.def()
    }
}

impl Related<super::event_like_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventLikeDbModels.def()
    }
}

impl Related<super::post_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostDbModels.def()
    }
}

impl Related<super::post_like_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostLikeDbModels.def()
    }
}

impl Related<super::spot_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SpotDbModels.def()
    }
}

impl Related<super::thread_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ThreadDbModels.def()
    }
}

impl Related<super::thread_like_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ThreadLikeDbModels.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
