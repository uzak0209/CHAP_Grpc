//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "event_db_models")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub user_name: String,
    pub user_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub user_image: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
    pub like_count: Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((10, 8)))", nullable)]
    pub lat: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((11, 8)))", nullable)]
    pub lng: Option<Decimal>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    pub event_date: DateTime,
    pub content_type: Option<String>,
    pub title: String,
    pub valid: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::event_like_db_models::Entity")]
    EventLikeDbModels,
    #[sea_orm(
        belongs_to = "super::user_db_models::Entity",
        from = "Column::UserId",
        to = "super::user_db_models::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    UserDbModels,
}

impl Related<super::event_like_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventLikeDbModels.def()
    }
}

impl Related<super::user_db_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserDbModels.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
