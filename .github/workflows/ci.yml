name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install protobuf tools
      run: make tools

    - name: Generate protobuf code
      run: make generate

    - name: Run unit tests
      run: |
        cd backend
        go test -v ./...

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install protobuf tools
      run: make tools

    - name: Generate protobuf code and swagger
      run: make generate

    - name: Create test environment file
      run: |
        cat > backend/.env << EOF
        DB_DSN=postgresql://postgres:password@postgres:5432/chap_grpc?sslmode=disable
        JWT_SECRET=test-jwt-secret-for-ci
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=password
        POSTGRES_DB=chap_grpc
        EOF

    - name: Start services with Docker Compose
      run: |
        docker compose up -d --build
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
        
        # Check if services are running
        docker compose ps
        docker compose logs grpc-server
        docker compose logs envoy

    - name: Install test dependencies
      run: |
        # Install grpcurl for gRPC testing
        curl -sSL "https://github.com/fullstorydev/grpcurl/releases/download/v1.8.9/grpcurl_1.8.9_linux_x86_64.tar.gz" | tar -xz -C /tmp
        sudo mv /tmp/grpcurl /usr/local/bin/
        
        # Install curl for HTTP testing
        sudo apt-get update
        sudo apt-get install -y curl jq

    - name: Wait for services to be healthy
      run: |
        # Wait for Envoy to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8080/health 2>/dev/null; do echo "Waiting for Envoy..."; sleep 5; done' || true
        
        # Wait for gRPC server to be ready
        timeout 60 bash -c 'until grpcurl -plaintext localhost:50051 list 2>/dev/null; do echo "Waiting for gRPC server..."; sleep 5; done'

    - name: Run integration tests
      run: |
        # Run the integration test script
        chmod +x ./scripts/integration-test.sh
        ./scripts/integration-test.sh

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== gRPC Server Logs ==="
        docker compose logs grpc-server
        echo "=== Envoy Logs ==="
        docker compose logs envoy
        echo "=== Swagger UI Logs ==="
        docker compose logs swagger-ui

    - name: Cleanup
      if: always()
      run: docker compose down -v

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: integration-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install protobuf tools
      run: make tools

    - name: Generate protobuf code
      run: make generate

    - name: Build Docker images
      run: |
        docker compose build --no-cache

    - name: Test Docker images
      run: |
        # Quick smoke test of built images
        docker run --rm --name test-backend -d -p 50052:50051 chap_grpc-grpc-server:latest || true
        sleep 5
        docker stop test-backend || true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: backend
        