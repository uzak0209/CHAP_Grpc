// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: comment.proto

package pd

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Comment struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ThreadId        string                 `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserName        string                 `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserId          string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserImage       string                 `protobuf:"bytes,5,opt,name=user_image,json=userImage,proto3" json:"user_image,omitempty"`
	Content         string                 `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Image           string                 `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	ParentCommentId string                 `protobuf:"bytes,8,opt,name=parent_comment_id,json=parentCommentId,proto3" json:"parent_comment_id,omitempty"`
	LikeCount       int32                  `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	CreatedAt       string                 `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                 `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Lat             float64                `protobuf:"fixed64,12,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng             float64                `protobuf:"fixed64,13,opt,name=lng,proto3" json:"lng,omitempty"`
	Likes           []string               `protobuf:"bytes,14,rep,name=likes,proto3" json:"likes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_comment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{0}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Comment) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Comment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Comment) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Comment) GetParentCommentId() string {
	if x != nil {
		return x.ParentCommentId
	}
	return ""
}

func (x *Comment) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Comment) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Comment) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Comment) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Comment) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Comment) GetLikes() []string {
	if x != nil {
		return x.Likes
	}
	return nil
}

type GetCommentsByThreadIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Lat           float64                `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng           float64                `protobuf:"fixed64,3,opt,name=lng,proto3" json:"lng,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentsByThreadIDRequest) Reset() {
	*x = GetCommentsByThreadIDRequest{}
	mi := &file_comment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentsByThreadIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsByThreadIDRequest) ProtoMessage() {}

func (x *GetCommentsByThreadIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsByThreadIDRequest.ProtoReflect.Descriptor instead.
func (*GetCommentsByThreadIDRequest) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{1}
}

func (x *GetCommentsByThreadIDRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *GetCommentsByThreadIDRequest) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GetCommentsByThreadIDRequest) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

type GetCommentsByThreadIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comments      []*Comment             `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentsByThreadIDResponse) Reset() {
	*x = GetCommentsByThreadIDResponse{}
	mi := &file_comment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentsByThreadIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsByThreadIDResponse) ProtoMessage() {}

func (x *GetCommentsByThreadIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsByThreadIDResponse.ProtoReflect.Descriptor instead.
func (*GetCommentsByThreadIDResponse) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{2}
}

func (x *GetCommentsByThreadIDResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

type CreateCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCommentRequest) Reset() {
	*x = CreateCommentRequest{}
	mi := &file_comment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentRequest) ProtoMessage() {}

func (x *CreateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentRequest.ProtoReflect.Descriptor instead.
func (*CreateCommentRequest) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCommentRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *CreateCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type EditCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommentId     string                 `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditCommentRequest) Reset() {
	*x = EditCommentRequest{}
	mi := &file_comment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCommentRequest) ProtoMessage() {}

func (x *EditCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCommentRequest.ProtoReflect.Descriptor instead.
func (*EditCommentRequest) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{4}
}

func (x *EditCommentRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *EditCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DeleteCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommentId     string                 `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentRequest) Reset() {
	*x = DeleteCommentRequest{}
	mi := &file_comment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentRequest) ProtoMessage() {}

func (x *DeleteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteCommentRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

var File_comment_proto protoreflect.FileDescriptor

const file_comment_proto_rawDesc = "" +
	"\n" +
	"\rcomment.proto\x12\x0fchap.comment.v1\x1a\fcommon.proto\x1a\x1cgoogle/api/annotations.proto\"\xfe\x02\n" +
	"\aComment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tthread_id\x18\x02 \x01(\tR\bthreadId\x12\x1b\n" +
	"\tuser_name\x18\x03 \x01(\tR\buserName\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"user_image\x18\x05 \x01(\tR\tuserImage\x12\x18\n" +
	"\acontent\x18\x06 \x01(\tR\acontent\x12\x14\n" +
	"\x05image\x18\a \x01(\tR\x05image\x12*\n" +
	"\x11parent_comment_id\x18\b \x01(\tR\x0fparentCommentId\x12\x1d\n" +
	"\n" +
	"like_count\x18\t \x01(\x05R\tlikeCount\x12\x1d\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\v \x01(\tR\tupdatedAt\x12\x10\n" +
	"\x03lat\x18\f \x01(\x01R\x03lat\x12\x10\n" +
	"\x03lng\x18\r \x01(\x01R\x03lng\x12\x14\n" +
	"\x05likes\x18\x0e \x03(\tR\x05likes\"_\n" +
	"\x1cGetCommentsByThreadIDRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x10\n" +
	"\x03lat\x18\x02 \x01(\x01R\x03lat\x12\x10\n" +
	"\x03lng\x18\x03 \x01(\x01R\x03lng\"U\n" +
	"\x1dGetCommentsByThreadIDResponse\x124\n" +
	"\bcomments\x18\x01 \x03(\v2\x18.chap.comment.v1.CommentR\bcomments\"M\n" +
	"\x14CreateCommentRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\"M\n" +
	"\x12EditCommentRequest\x12\x1d\n" +
	"\n" +
	"comment_id\x18\x01 \x01(\tR\tcommentId\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\"5\n" +
	"\x14DeleteCommentRequest\x12\x1d\n" +
	"\n" +
	"comment_id\x18\x01 \x01(\tR\tcommentId2\xc4\x04\n" +
	"\x0eCommentService\x12\xa4\x01\n" +
	"\x15GetCommentsByThreadID\x12-.chap.comment.v1.GetCommentsByThreadIDRequest\x1a..chap.comment.v1.GetCommentsByThreadIDResponse\",\x82\xd3\xe4\x93\x02&\x12$/api/v1/threads/{thread_id}/comments\x12\x89\x01\n" +
	"\rCreateComment\x12%.chap.comment.v1.CreateCommentRequest\x1a .chap.common.v1.StandardResponse\"/\x82\xd3\xe4\x93\x02):\x01*\"$/api/v1/threads/{thread_id}/comments\x12~\n" +
	"\vEditComment\x12#.chap.comment.v1.EditCommentRequest\x1a .chap.common.v1.StandardResponse\"(\x82\xd3\xe4\x93\x02\":\x01*\x1a\x1d/api/v1/comments/{comment_id}\x12\x7f\n" +
	"\rDeleteComment\x12%.chap.comment.v1.DeleteCommentRequest\x1a .chap.common.v1.StandardResponse\"%\x82\xd3\xe4\x93\x02\x1f*\x1d/api/v1/comments/{comment_id}B1Z/github.com/uzak0209/CHAP_Grpc/backend/api/pd;pdb\x06proto3"

var (
	file_comment_proto_rawDescOnce sync.Once
	file_comment_proto_rawDescData []byte
)

func file_comment_proto_rawDescGZIP() []byte {
	file_comment_proto_rawDescOnce.Do(func() {
		file_comment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_comment_proto_rawDesc), len(file_comment_proto_rawDesc)))
	})
	return file_comment_proto_rawDescData
}

var file_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_comment_proto_goTypes = []any{
	(*Comment)(nil),                       // 0: chap.comment.v1.Comment
	(*GetCommentsByThreadIDRequest)(nil),  // 1: chap.comment.v1.GetCommentsByThreadIDRequest
	(*GetCommentsByThreadIDResponse)(nil), // 2: chap.comment.v1.GetCommentsByThreadIDResponse
	(*CreateCommentRequest)(nil),          // 3: chap.comment.v1.CreateCommentRequest
	(*EditCommentRequest)(nil),            // 4: chap.comment.v1.EditCommentRequest
	(*DeleteCommentRequest)(nil),          // 5: chap.comment.v1.DeleteCommentRequest
	(*StandardResponse)(nil),              // 6: chap.common.v1.StandardResponse
}
var file_comment_proto_depIdxs = []int32{
	0, // 0: chap.comment.v1.GetCommentsByThreadIDResponse.comments:type_name -> chap.comment.v1.Comment
	1, // 1: chap.comment.v1.CommentService.GetCommentsByThreadID:input_type -> chap.comment.v1.GetCommentsByThreadIDRequest
	3, // 2: chap.comment.v1.CommentService.CreateComment:input_type -> chap.comment.v1.CreateCommentRequest
	4, // 3: chap.comment.v1.CommentService.EditComment:input_type -> chap.comment.v1.EditCommentRequest
	5, // 4: chap.comment.v1.CommentService.DeleteComment:input_type -> chap.comment.v1.DeleteCommentRequest
	2, // 5: chap.comment.v1.CommentService.GetCommentsByThreadID:output_type -> chap.comment.v1.GetCommentsByThreadIDResponse
	6, // 6: chap.comment.v1.CommentService.CreateComment:output_type -> chap.common.v1.StandardResponse
	6, // 7: chap.comment.v1.CommentService.EditComment:output_type -> chap.common.v1.StandardResponse
	6, // 8: chap.comment.v1.CommentService.DeleteComment:output_type -> chap.common.v1.StandardResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_comment_proto_init() }
func file_comment_proto_init() {
	if File_comment_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_comment_proto_rawDesc), len(file_comment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comment_proto_goTypes,
		DependencyIndexes: file_comment_proto_depIdxs,
		MessageInfos:      file_comment_proto_msgTypes,
	}.Build()
	File_comment_proto = out.File
	file_comment_proto_goTypes = nil
	file_comment_proto_depIdxs = nil
}
