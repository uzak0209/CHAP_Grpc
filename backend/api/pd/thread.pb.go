// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: thread.proto

package pd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetThreadByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThreadByIDRequest) Reset() {
	*x = GetThreadByIDRequest{}
	mi := &file_thread_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThreadByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadByIDRequest) ProtoMessage() {}

func (x *GetThreadByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadByIDRequest.ProtoReflect.Descriptor instead.
func (*GetThreadByIDRequest) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{0}
}

func (x *GetThreadByIDRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

type GetThreadByIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Thread        *Thread                `protobuf:"bytes,1,opt,name=thread,proto3" json:"thread,omitempty"`
	Comment       []*Comment             `protobuf:"bytes,2,rep,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThreadByIDResponse) Reset() {
	*x = GetThreadByIDResponse{}
	mi := &file_thread_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThreadByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadByIDResponse) ProtoMessage() {}

func (x *GetThreadByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadByIDResponse.ProtoReflect.Descriptor instead.
func (*GetThreadByIDResponse) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{1}
}

func (x *GetThreadByIDResponse) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *GetThreadByIDResponse) GetComment() []*Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type Thread struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserImage     string                 `protobuf:"bytes,4,opt,name=user_image,json=userImage,proto3" json:"user_image,omitempty"`
	Content       string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Image         string                 `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	LikeCount     int32                  `protobuf:"varint,7,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Lat           float64                `protobuf:"fixed64,10,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng           float64                `protobuf:"fixed64,11,opt,name=lng,proto3" json:"lng,omitempty"`
	Likes         []string               `protobuf:"bytes,12,rep,name=likes,proto3" json:"likes,omitempty"`
	Comments      []string               `protobuf:"bytes,13,rep,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Thread) Reset() {
	*x = Thread{}
	mi := &file_thread_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{2}
}

func (x *Thread) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Thread) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Thread) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Thread) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *Thread) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Thread) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Thread) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Thread) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Thread) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Thread) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Thread) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Thread) GetLikes() []string {
	if x != nil {
		return x.Likes
	}
	return nil
}

func (x *Thread) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

type GetThreadsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lat           float64                `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng           float64                `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThreadsRequest) Reset() {
	*x = GetThreadsRequest{}
	mi := &file_thread_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThreadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadsRequest) ProtoMessage() {}

func (x *GetThreadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadsRequest.ProtoReflect.Descriptor instead.
func (*GetThreadsRequest) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{3}
}

func (x *GetThreadsRequest) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GetThreadsRequest) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

type GetThreadsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Threads       []*Thread              `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThreadsResponse) Reset() {
	*x = GetThreadsResponse{}
	mi := &file_thread_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThreadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadsResponse) ProtoMessage() {}

func (x *GetThreadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadsResponse.ProtoReflect.Descriptor instead.
func (*GetThreadsResponse) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{4}
}

func (x *GetThreadsResponse) GetThreads() []*Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

type CreateThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Image         string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Lat           float64                `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng           float64                `protobuf:"fixed64,4,opt,name=lng,proto3" json:"lng,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateThreadRequest) Reset() {
	*x = CreateThreadRequest{}
	mi := &file_thread_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadRequest) ProtoMessage() {}

func (x *CreateThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadRequest.ProtoReflect.Descriptor instead.
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{5}
}

func (x *CreateThreadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateThreadRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateThreadRequest) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *CreateThreadRequest) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

type EditThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Image         string                 `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditThreadRequest) Reset() {
	*x = EditThreadRequest{}
	mi := &file_thread_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditThreadRequest) ProtoMessage() {}

func (x *EditThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditThreadRequest.ProtoReflect.Descriptor instead.
func (*EditThreadRequest) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{6}
}

func (x *EditThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *EditThreadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EditThreadRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type DeleteThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteThreadRequest) Reset() {
	*x = DeleteThreadRequest{}
	mi := &file_thread_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadRequest) ProtoMessage() {}

func (x *DeleteThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadRequest.ProtoReflect.Descriptor instead.
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

var File_thread_proto protoreflect.FileDescriptor

const file_thread_proto_rawDesc = "" +
	"\n" +
	"\fthread.proto\x12\x0echap.thread.v1\x1a\fcommon.proto\x1a\rcomment.proto\"3\n" +
	"\x14GetThreadByIDRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\"{\n" +
	"\x15GetThreadByIDResponse\x12.\n" +
	"\x06thread\x18\x01 \x01(\v2\x16.chap.thread.v1.ThreadR\x06thread\x122\n" +
	"\acomment\x18\x02 \x03(\v2\x18.chap.comment.v1.CommentR\acomment\"\xd0\x02\n" +
	"\x06Thread\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tuser_name\x18\x02 \x01(\tR\buserName\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"user_image\x18\x04 \x01(\tR\tuserImage\x12\x18\n" +
	"\acontent\x18\x05 \x01(\tR\acontent\x12\x14\n" +
	"\x05image\x18\x06 \x01(\tR\x05image\x12\x1d\n" +
	"\n" +
	"like_count\x18\a \x01(\x05R\tlikeCount\x12\x1d\n" +
	"\n" +
	"created_at\x18\b \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\t \x01(\tR\tupdatedAt\x12\x10\n" +
	"\x03lat\x18\n" +
	" \x01(\x01R\x03lat\x12\x10\n" +
	"\x03lng\x18\v \x01(\x01R\x03lng\x12\x14\n" +
	"\x05likes\x18\f \x03(\tR\x05likes\x12\x1a\n" +
	"\bcomments\x18\r \x03(\tR\bcomments\"7\n" +
	"\x11GetThreadsRequest\x12\x10\n" +
	"\x03lat\x18\x01 \x01(\x01R\x03lat\x12\x10\n" +
	"\x03lng\x18\x02 \x01(\x01R\x03lng\"F\n" +
	"\x12GetThreadsResponse\x120\n" +
	"\athreads\x18\x01 \x03(\v2\x16.chap.thread.v1.ThreadR\athreads\"i\n" +
	"\x13CreateThreadRequest\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12\x10\n" +
	"\x03lat\x18\x03 \x01(\x01R\x03lat\x12\x10\n" +
	"\x03lng\x18\x04 \x01(\x01R\x03lng\"`\n" +
	"\x11EditThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12\x14\n" +
	"\x05image\x18\x03 \x01(\tR\x05image\"2\n" +
	"\x13DeleteThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId2\xc4\x03\n" +
	"\rThreadService\x12]\n" +
	"\x0eGetThreadsByID\x12$.chap.thread.v1.GetThreadByIDRequest\x1a%.chap.thread.v1.GetThreadByIDResponse\x12S\n" +
	"\n" +
	"GetThreads\x12!.chap.thread.v1.GetThreadsRequest\x1a\".chap.thread.v1.GetThreadsResponse\x12U\n" +
	"\fCreateThread\x12#.chap.thread.v1.CreateThreadRequest\x1a .chap.common.v1.StandardResponse\x12Q\n" +
	"\n" +
	"EditThread\x12!.chap.thread.v1.EditThreadRequest\x1a .chap.common.v1.StandardResponse\x12U\n" +
	"\fDeleteThread\x12#.chap.thread.v1.DeleteThreadRequest\x1a .chap.common.v1.StandardResponseB1Z/github.com/uzak0209/CHAP_Grpc/backend/api/pd;pdb\x06proto3"

var (
	file_thread_proto_rawDescOnce sync.Once
	file_thread_proto_rawDescData []byte
)

func file_thread_proto_rawDescGZIP() []byte {
	file_thread_proto_rawDescOnce.Do(func() {
		file_thread_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_thread_proto_rawDesc), len(file_thread_proto_rawDesc)))
	})
	return file_thread_proto_rawDescData
}

var file_thread_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_thread_proto_goTypes = []any{
	(*GetThreadByIDRequest)(nil),  // 0: chap.thread.v1.GetThreadByIDRequest
	(*GetThreadByIDResponse)(nil), // 1: chap.thread.v1.GetThreadByIDResponse
	(*Thread)(nil),                // 2: chap.thread.v1.Thread
	(*GetThreadsRequest)(nil),     // 3: chap.thread.v1.GetThreadsRequest
	(*GetThreadsResponse)(nil),    // 4: chap.thread.v1.GetThreadsResponse
	(*CreateThreadRequest)(nil),   // 5: chap.thread.v1.CreateThreadRequest
	(*EditThreadRequest)(nil),     // 6: chap.thread.v1.EditThreadRequest
	(*DeleteThreadRequest)(nil),   // 7: chap.thread.v1.DeleteThreadRequest
	(*Comment)(nil),               // 8: chap.comment.v1.Comment
	(*StandardResponse)(nil),      // 9: chap.common.v1.StandardResponse
}
var file_thread_proto_depIdxs = []int32{
	2, // 0: chap.thread.v1.GetThreadByIDResponse.thread:type_name -> chap.thread.v1.Thread
	8, // 1: chap.thread.v1.GetThreadByIDResponse.comment:type_name -> chap.comment.v1.Comment
	2, // 2: chap.thread.v1.GetThreadsResponse.threads:type_name -> chap.thread.v1.Thread
	0, // 3: chap.thread.v1.ThreadService.GetThreadsByID:input_type -> chap.thread.v1.GetThreadByIDRequest
	3, // 4: chap.thread.v1.ThreadService.GetThreads:input_type -> chap.thread.v1.GetThreadsRequest
	5, // 5: chap.thread.v1.ThreadService.CreateThread:input_type -> chap.thread.v1.CreateThreadRequest
	6, // 6: chap.thread.v1.ThreadService.EditThread:input_type -> chap.thread.v1.EditThreadRequest
	7, // 7: chap.thread.v1.ThreadService.DeleteThread:input_type -> chap.thread.v1.DeleteThreadRequest
	1, // 8: chap.thread.v1.ThreadService.GetThreadsByID:output_type -> chap.thread.v1.GetThreadByIDResponse
	4, // 9: chap.thread.v1.ThreadService.GetThreads:output_type -> chap.thread.v1.GetThreadsResponse
	9, // 10: chap.thread.v1.ThreadService.CreateThread:output_type -> chap.common.v1.StandardResponse
	9, // 11: chap.thread.v1.ThreadService.EditThread:output_type -> chap.common.v1.StandardResponse
	9, // 12: chap.thread.v1.ThreadService.DeleteThread:output_type -> chap.common.v1.StandardResponse
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_thread_proto_init() }
func file_thread_proto_init() {
	if File_thread_proto != nil {
		return
	}
	file_common_proto_init()
	file_comment_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_thread_proto_rawDesc), len(file_thread_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_thread_proto_goTypes,
		DependencyIndexes: file_thread_proto_depIdxs,
		MessageInfos:      file_thread_proto_msgTypes,
	}.Build()
	File_thread_proto = out.File
	file_thread_proto_goTypes = nil
	file_thread_proto_depIdxs = nil
}
