// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: spot.proto

package pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpotService_GetSpots_FullMethodName   = "/chap.spot.v1.SpotService/GetSpots"
	SpotService_CreateSpot_FullMethodName = "/chap.spot.v1.SpotService/CreateSpot"
	SpotService_EditSpot_FullMethodName   = "/chap.spot.v1.SpotService/EditSpot"
	SpotService_DeleteSpot_FullMethodName = "/chap.spot.v1.SpotService/DeleteSpot"
)

// SpotServiceClient is the client API for SpotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotServiceClient interface {
	// スポット操作
	GetSpots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSpotsResponse, error)
	CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	EditSpot(ctx context.Context, in *EditSpotRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	DeleteSpot(ctx context.Context, in *DeleteSpotRequest, opts ...grpc.CallOption) (*StandardResponse, error)
}

type spotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotServiceClient(cc grpc.ClientConnInterface) SpotServiceClient {
	return &spotServiceClient{cc}
}

func (c *spotServiceClient) GetSpots(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSpotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpotsResponse)
	err := c.cc.Invoke(ctx, SpotService_GetSpots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, SpotService_CreateSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) EditSpot(ctx context.Context, in *EditSpotRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, SpotService_EditSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) DeleteSpot(ctx context.Context, in *DeleteSpotRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, SpotService_DeleteSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpotServiceServer is the server API for SpotService service.
// All implementations must embed UnimplementedSpotServiceServer
// for forward compatibility.
type SpotServiceServer interface {
	// スポット操作
	GetSpots(context.Context, *Empty) (*GetSpotsResponse, error)
	CreateSpot(context.Context, *CreateSpotRequest) (*StandardResponse, error)
	EditSpot(context.Context, *EditSpotRequest) (*StandardResponse, error)
	DeleteSpot(context.Context, *DeleteSpotRequest) (*StandardResponse, error)
	mustEmbedUnimplementedSpotServiceServer()
}

// UnimplementedSpotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpotServiceServer struct{}

func (UnimplementedSpotServiceServer) GetSpots(context.Context, *Empty) (*GetSpotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpots not implemented")
}
func (UnimplementedSpotServiceServer) CreateSpot(context.Context, *CreateSpotRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpot not implemented")
}
func (UnimplementedSpotServiceServer) EditSpot(context.Context, *EditSpotRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSpot not implemented")
}
func (UnimplementedSpotServiceServer) DeleteSpot(context.Context, *DeleteSpotRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpot not implemented")
}
func (UnimplementedSpotServiceServer) mustEmbedUnimplementedSpotServiceServer() {}
func (UnimplementedSpotServiceServer) testEmbeddedByValue()                     {}

// UnsafeSpotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotServiceServer will
// result in compilation errors.
type UnsafeSpotServiceServer interface {
	mustEmbedUnimplementedSpotServiceServer()
}

func RegisterSpotServiceServer(s grpc.ServiceRegistrar, srv SpotServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpotService_ServiceDesc, srv)
}

func _SpotService_GetSpots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).GetSpots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotService_GetSpots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).GetSpots(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_CreateSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).CreateSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotService_CreateSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).CreateSpot(ctx, req.(*CreateSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_EditSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).EditSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotService_EditSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).EditSpot(ctx, req.(*EditSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_DeleteSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).DeleteSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotService_DeleteSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).DeleteSpot(ctx, req.(*DeleteSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpotService_ServiceDesc is the grpc.ServiceDesc for SpotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chap.spot.v1.SpotService",
	HandlerType: (*SpotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpots",
			Handler:    _SpotService_GetSpots_Handler,
		},
		{
			MethodName: "CreateSpot",
			Handler:    _SpotService_CreateSpot_Handler,
		},
		{
			MethodName: "EditSpot",
			Handler:    _SpotService_EditSpot_Handler,
		},
		{
			MethodName: "DeleteSpot",
			Handler:    _SpotService_DeleteSpot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spot.proto",
}
