/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * spot.proto
 * OpenAPI spec version: version not set
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  RpcStatus,
  V1CreateSpotRequest,
  V1EditSpotRequest,
  V1Empty,
  V1GetSpotsResponse,
  V1StandardResponse
} from './';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary „Çπ„Éù„ÉÉ„ÉàÊìç‰Ωú
 */
export const spotServiceGetSpots = (
    v1Empty: V1Empty, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetSpotsResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/spots`,
      v1Empty,options
    );
  }



export const getSpotServiceGetSpotsMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spotServiceGetSpots>>, TError,{data: V1Empty}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof spotServiceGetSpots>>, TError,{data: V1Empty}, TContext> => {

const mutationKey = ['spotServiceGetSpots'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof spotServiceGetSpots>>, {data: V1Empty}> = (props) => {
          const {data} = props ?? {};

          return  spotServiceGetSpots(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SpotServiceGetSpotsMutationResult = NonNullable<Awaited<ReturnType<typeof spotServiceGetSpots>>>
    export type SpotServiceGetSpotsMutationBody = V1Empty
    export type SpotServiceGetSpotsMutationError = AxiosError<RpcStatus>

    /**
 * @summary „Çπ„Éù„ÉÉ„ÉàÊìç‰Ωú
 */
export const useSpotServiceGetSpots = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spotServiceGetSpots>>, TError,{data: V1Empty}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof spotServiceGetSpots>>,
        TError,
        {data: V1Empty},
        TContext
      > => {

      const mutationOptions = getSpotServiceGetSpotsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const spotServiceCreateSpot = (
    v1CreateSpotRequest: V1CreateSpotRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/spots/create`,
      v1CreateSpotRequest,options
    );
  }



export const getSpotServiceCreateSpotMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spotServiceCreateSpot>>, TError,{data: V1CreateSpotRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof spotServiceCreateSpot>>, TError,{data: V1CreateSpotRequest}, TContext> => {

const mutationKey = ['spotServiceCreateSpot'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof spotServiceCreateSpot>>, {data: V1CreateSpotRequest}> = (props) => {
          const {data} = props ?? {};

          return  spotServiceCreateSpot(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SpotServiceCreateSpotMutationResult = NonNullable<Awaited<ReturnType<typeof spotServiceCreateSpot>>>
    export type SpotServiceCreateSpotMutationBody = V1CreateSpotRequest
    export type SpotServiceCreateSpotMutationError = AxiosError<RpcStatus>

    export const useSpotServiceCreateSpot = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spotServiceCreateSpot>>, TError,{data: V1CreateSpotRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof spotServiceCreateSpot>>,
        TError,
        {data: V1CreateSpotRequest},
        TContext
      > => {

      const mutationOptions = getSpotServiceCreateSpotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const spotServiceDeleteSpot = (
    spotId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/spots/delete/${spotId}`,options
    );
  }



export const getSpotServiceDeleteSpotMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spotServiceDeleteSpot>>, TError,{spotId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof spotServiceDeleteSpot>>, TError,{spotId: string}, TContext> => {

const mutationKey = ['spotServiceDeleteSpot'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof spotServiceDeleteSpot>>, {spotId: string}> = (props) => {
          const {spotId} = props ?? {};

          return  spotServiceDeleteSpot(spotId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SpotServiceDeleteSpotMutationResult = NonNullable<Awaited<ReturnType<typeof spotServiceDeleteSpot>>>
    
    export type SpotServiceDeleteSpotMutationError = AxiosError<RpcStatus>

    export const useSpotServiceDeleteSpot = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spotServiceDeleteSpot>>, TError,{spotId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof spotServiceDeleteSpot>>,
        TError,
        {spotId: string},
        TContext
      > => {

      const mutationOptions = getSpotServiceDeleteSpotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const spotServiceEditSpot = (
    v1EditSpotRequest: V1EditSpotRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/spots/edit`,
      v1EditSpotRequest,options
    );
  }



export const getSpotServiceEditSpotMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spotServiceEditSpot>>, TError,{data: V1EditSpotRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof spotServiceEditSpot>>, TError,{data: V1EditSpotRequest}, TContext> => {

const mutationKey = ['spotServiceEditSpot'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof spotServiceEditSpot>>, {data: V1EditSpotRequest}> = (props) => {
          const {data} = props ?? {};

          return  spotServiceEditSpot(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SpotServiceEditSpotMutationResult = NonNullable<Awaited<ReturnType<typeof spotServiceEditSpot>>>
    export type SpotServiceEditSpotMutationBody = V1EditSpotRequest
    export type SpotServiceEditSpotMutationError = AxiosError<RpcStatus>

    export const useSpotServiceEditSpot = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof spotServiceEditSpot>>, TError,{data: V1EditSpotRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof spotServiceEditSpot>>,
        TError,
        {data: V1EditSpotRequest},
        TContext
      > => {

      const mutationOptions = getSpotServiceEditSpotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
