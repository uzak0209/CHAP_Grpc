/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * comment.proto
 * OpenAPI spec version: version not set
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CommentServiceGetCommentsByThreadIDParams,
  RpcStatus,
  V1CreateCommentRequest,
  V1EditCommentRequest,
  V1GetCommentsByThreadIDResponse,
  V1StandardResponse
} from './comment.schemas.ts';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const commentServiceCreateComment = (
    v1CreateCommentRequest: V1CreateCommentRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/comments/create`,
      v1CreateCommentRequest,options
    );
  }



export const getCommentServiceCreateCommentMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commentServiceCreateComment>>, TError,{data: V1CreateCommentRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof commentServiceCreateComment>>, TError,{data: V1CreateCommentRequest}, TContext> => {

const mutationKey = ['commentServiceCreateComment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commentServiceCreateComment>>, {data: V1CreateCommentRequest}> = (props) => {
          const {data} = props ?? {};

          return  commentServiceCreateComment(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CommentServiceCreateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof commentServiceCreateComment>>>
    export type CommentServiceCreateCommentMutationBody = V1CreateCommentRequest
    export type CommentServiceCreateCommentMutationError = AxiosError<RpcStatus>

    export const useCommentServiceCreateComment = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commentServiceCreateComment>>, TError,{data: V1CreateCommentRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof commentServiceCreateComment>>,
        TError,
        {data: V1CreateCommentRequest},
        TContext
      > => {

      const mutationOptions = getCommentServiceCreateCommentMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
export const commentServiceDeleteComment = (
    commentId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/comments/delete/${commentId}`,options
    );
  }



export const getCommentServiceDeleteCommentMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commentServiceDeleteComment>>, TError,{commentId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof commentServiceDeleteComment>>, TError,{commentId: string}, TContext> => {

const mutationKey = ['commentServiceDeleteComment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commentServiceDeleteComment>>, {commentId: string}> = (props) => {
          const {commentId} = props ?? {};

          return  commentServiceDeleteComment(commentId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CommentServiceDeleteCommentMutationResult = NonNullable<Awaited<ReturnType<typeof commentServiceDeleteComment>>>
    
    export type CommentServiceDeleteCommentMutationError = AxiosError<RpcStatus>

    export const useCommentServiceDeleteComment = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commentServiceDeleteComment>>, TError,{commentId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof commentServiceDeleteComment>>,
        TError,
        {commentId: string},
        TContext
      > => {

      const mutationOptions = getCommentServiceDeleteCommentMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
export const commentServiceEditComment = (
    v1EditCommentRequest: V1EditCommentRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/comments/edit`,
      v1EditCommentRequest,options
    );
  }



export const getCommentServiceEditCommentMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commentServiceEditComment>>, TError,{data: V1EditCommentRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof commentServiceEditComment>>, TError,{data: V1EditCommentRequest}, TContext> => {

const mutationKey = ['commentServiceEditComment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commentServiceEditComment>>, {data: V1EditCommentRequest}> = (props) => {
          const {data} = props ?? {};

          return  commentServiceEditComment(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CommentServiceEditCommentMutationResult = NonNullable<Awaited<ReturnType<typeof commentServiceEditComment>>>
    export type CommentServiceEditCommentMutationBody = V1EditCommentRequest
    export type CommentServiceEditCommentMutationError = AxiosError<RpcStatus>

    export const useCommentServiceEditComment = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commentServiceEditComment>>, TError,{data: V1EditCommentRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof commentServiceEditComment>>,
        TError,
        {data: V1EditCommentRequest},
        TContext
      > => {

      const mutationOptions = getCommentServiceEditCommentMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary „Ç≥„É°„É≥„ÉàÊìç‰Ωú
 */
export const commentServiceGetCommentsByThreadID = (
    threadId: string,
    params?: CommentServiceGetCommentsByThreadIDParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetCommentsByThreadIDResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/comments/${threadId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }




export const getCommentServiceGetCommentsByThreadIDQueryKey = (threadId?: string,
    params?: CommentServiceGetCommentsByThreadIDParams,) => {
    return [
    `/api/v1/comments/${threadId}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getCommentServiceGetCommentsByThreadIDQueryOptions = <TData = Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError = AxiosError<RpcStatus>>(threadId: string,
    params?: CommentServiceGetCommentsByThreadIDParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCommentServiceGetCommentsByThreadIDQueryKey(threadId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>> = ({ signal }) => commentServiceGetCommentsByThreadID(threadId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(threadId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CommentServiceGetCommentsByThreadIDQueryResult = NonNullable<Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>>
export type CommentServiceGetCommentsByThreadIDQueryError = AxiosError<RpcStatus>


export function useCommentServiceGetCommentsByThreadID<TData = Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError = AxiosError<RpcStatus>>(
 threadId: string,
    params: undefined |  CommentServiceGetCommentsByThreadIDParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>,
          TError,
          Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCommentServiceGetCommentsByThreadID<TData = Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError = AxiosError<RpcStatus>>(
 threadId: string,
    params?: CommentServiceGetCommentsByThreadIDParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>,
          TError,
          Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCommentServiceGetCommentsByThreadID<TData = Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError = AxiosError<RpcStatus>>(
 threadId: string,
    params?: CommentServiceGetCommentsByThreadIDParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Ç≥„É°„É≥„ÉàÊìç‰Ωú
 */

export function useCommentServiceGetCommentsByThreadID<TData = Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError = AxiosError<RpcStatus>>(
 threadId: string,
    params?: CommentServiceGetCommentsByThreadIDParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentServiceGetCommentsByThreadID>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCommentServiceGetCommentsByThreadIDQueryOptions(threadId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
