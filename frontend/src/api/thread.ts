/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * thread.proto
 * OpenAPI spec version: version not set
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  RpcStatus,
  ThreadServiceGetThreadsParams,
  V1CreateThreadRequest,
  V1EditThreadRequest,
  V1GetThreadByIDResponse,
  V1GetThreadsResponse,
  V1StandardResponse
} from './';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const threadServiceGetThreads = (
    params?: ThreadServiceGetThreadsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetThreadsResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/threads`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getThreadServiceGetThreadsQueryKey = (params?: ThreadServiceGetThreadsParams,) => {
    return [`/api/v1/threads`, ...(params ? [params]: [])] as const;
    }

    
export const getThreadServiceGetThreadsQueryOptions = <TData = Awaited<ReturnType<typeof threadServiceGetThreads>>, TError = AxiosError<RpcStatus>>(params?: ThreadServiceGetThreadsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreads>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getThreadServiceGetThreadsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof threadServiceGetThreads>>> = ({ signal }) => threadServiceGetThreads(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreads>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ThreadServiceGetThreadsQueryResult = NonNullable<Awaited<ReturnType<typeof threadServiceGetThreads>>>
export type ThreadServiceGetThreadsQueryError = AxiosError<RpcStatus>


export function useThreadServiceGetThreads<TData = Awaited<ReturnType<typeof threadServiceGetThreads>>, TError = AxiosError<RpcStatus>>(
 params: undefined |  ThreadServiceGetThreadsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreads>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof threadServiceGetThreads>>,
          TError,
          Awaited<ReturnType<typeof threadServiceGetThreads>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useThreadServiceGetThreads<TData = Awaited<ReturnType<typeof threadServiceGetThreads>>, TError = AxiosError<RpcStatus>>(
 params?: ThreadServiceGetThreadsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreads>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof threadServiceGetThreads>>,
          TError,
          Awaited<ReturnType<typeof threadServiceGetThreads>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useThreadServiceGetThreads<TData = Awaited<ReturnType<typeof threadServiceGetThreads>>, TError = AxiosError<RpcStatus>>(
 params?: ThreadServiceGetThreadsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreads>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useThreadServiceGetThreads<TData = Awaited<ReturnType<typeof threadServiceGetThreads>>, TError = AxiosError<RpcStatus>>(
 params?: ThreadServiceGetThreadsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreads>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getThreadServiceGetThreadsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const threadServiceCreateThread = (
    v1CreateThreadRequest: V1CreateThreadRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/threads/create`,
      v1CreateThreadRequest,options
    );
  }



export const getThreadServiceCreateThreadMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadServiceCreateThread>>, TError,{data: V1CreateThreadRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof threadServiceCreateThread>>, TError,{data: V1CreateThreadRequest}, TContext> => {

const mutationKey = ['threadServiceCreateThread'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof threadServiceCreateThread>>, {data: V1CreateThreadRequest}> = (props) => {
          const {data} = props ?? {};

          return  threadServiceCreateThread(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ThreadServiceCreateThreadMutationResult = NonNullable<Awaited<ReturnType<typeof threadServiceCreateThread>>>
    export type ThreadServiceCreateThreadMutationBody = V1CreateThreadRequest
    export type ThreadServiceCreateThreadMutationError = AxiosError<RpcStatus>

    export const useThreadServiceCreateThread = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadServiceCreateThread>>, TError,{data: V1CreateThreadRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof threadServiceCreateThread>>,
        TError,
        {data: V1CreateThreadRequest},
        TContext
      > => {

      const mutationOptions = getThreadServiceCreateThreadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const threadServiceDeleteThread = (
    threadId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/threads/delete/${threadId}`,options
    );
  }



export const getThreadServiceDeleteThreadMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadServiceDeleteThread>>, TError,{threadId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof threadServiceDeleteThread>>, TError,{threadId: string}, TContext> => {

const mutationKey = ['threadServiceDeleteThread'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof threadServiceDeleteThread>>, {threadId: string}> = (props) => {
          const {threadId} = props ?? {};

          return  threadServiceDeleteThread(threadId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ThreadServiceDeleteThreadMutationResult = NonNullable<Awaited<ReturnType<typeof threadServiceDeleteThread>>>
    
    export type ThreadServiceDeleteThreadMutationError = AxiosError<RpcStatus>

    export const useThreadServiceDeleteThread = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadServiceDeleteThread>>, TError,{threadId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof threadServiceDeleteThread>>,
        TError,
        {threadId: string},
        TContext
      > => {

      const mutationOptions = getThreadServiceDeleteThreadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const threadServiceEditThread = (
    v1EditThreadRequest: V1EditThreadRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/threads/edit`,
      v1EditThreadRequest,options
    );
  }



export const getThreadServiceEditThreadMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadServiceEditThread>>, TError,{data: V1EditThreadRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof threadServiceEditThread>>, TError,{data: V1EditThreadRequest}, TContext> => {

const mutationKey = ['threadServiceEditThread'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof threadServiceEditThread>>, {data: V1EditThreadRequest}> = (props) => {
          const {data} = props ?? {};

          return  threadServiceEditThread(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ThreadServiceEditThreadMutationResult = NonNullable<Awaited<ReturnType<typeof threadServiceEditThread>>>
    export type ThreadServiceEditThreadMutationBody = V1EditThreadRequest
    export type ThreadServiceEditThreadMutationError = AxiosError<RpcStatus>

    export const useThreadServiceEditThread = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadServiceEditThread>>, TError,{data: V1EditThreadRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof threadServiceEditThread>>,
        TError,
        {data: V1EditThreadRequest},
        TContext
      > => {

      const mutationOptions = getThreadServiceEditThreadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary „Çπ„É¨„ÉÉ„ÉâÊìç‰Ωú
 */
export const threadServiceGetThreadsByID = (
    threadId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetThreadByIDResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/threads/${threadId}`,options
    );
  }


export const getThreadServiceGetThreadsByIDQueryKey = (threadId?: string,) => {
    return [`/api/v1/threads/${threadId}`] as const;
    }

    
export const getThreadServiceGetThreadsByIDQueryOptions = <TData = Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError = AxiosError<RpcStatus>>(threadId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getThreadServiceGetThreadsByIDQueryKey(threadId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof threadServiceGetThreadsByID>>> = ({ signal }) => threadServiceGetThreadsByID(threadId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(threadId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ThreadServiceGetThreadsByIDQueryResult = NonNullable<Awaited<ReturnType<typeof threadServiceGetThreadsByID>>>
export type ThreadServiceGetThreadsByIDQueryError = AxiosError<RpcStatus>


export function useThreadServiceGetThreadsByID<TData = Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError = AxiosError<RpcStatus>>(
 threadId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof threadServiceGetThreadsByID>>,
          TError,
          Awaited<ReturnType<typeof threadServiceGetThreadsByID>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useThreadServiceGetThreadsByID<TData = Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError = AxiosError<RpcStatus>>(
 threadId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof threadServiceGetThreadsByID>>,
          TError,
          Awaited<ReturnType<typeof threadServiceGetThreadsByID>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useThreadServiceGetThreadsByID<TData = Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError = AxiosError<RpcStatus>>(
 threadId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çπ„É¨„ÉÉ„ÉâÊìç‰Ωú
 */

export function useThreadServiceGetThreadsByID<TData = Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError = AxiosError<RpcStatus>>(
 threadId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadServiceGetThreadsByID>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getThreadServiceGetThreadsByIDQueryOptions(threadId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
