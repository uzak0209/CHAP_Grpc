/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * user.proto
 * OpenAPI spec version: version not set
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  RpcStatus,
  UserServiceFollowUserBody,
  V1EditUserRequest,
  V1GetUserByIDResponse,
  V1StandardResponse
} from './';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const userServiceDeleteUser = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/users/delete/${userId}`,options
    );
  }



export const getUserServiceDeleteUserMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userServiceDeleteUser>>, TError,{userId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof userServiceDeleteUser>>, TError,{userId: string}, TContext> => {

const mutationKey = ['userServiceDeleteUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userServiceDeleteUser>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  userServiceDeleteUser(userId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UserServiceDeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof userServiceDeleteUser>>>
    
    export type UserServiceDeleteUserMutationError = AxiosError<RpcStatus>

    export const useUserServiceDeleteUser = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userServiceDeleteUser>>, TError,{userId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof userServiceDeleteUser>>,
        TError,
        {userId: string},
        TContext
      > => {

      const mutationOptions = getUserServiceDeleteUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const userServiceEditUser = (
    v1EditUserRequest: V1EditUserRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/users/edit`,
      v1EditUserRequest,options
    );
  }



export const getUserServiceEditUserMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userServiceEditUser>>, TError,{data: V1EditUserRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof userServiceEditUser>>, TError,{data: V1EditUserRequest}, TContext> => {

const mutationKey = ['userServiceEditUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userServiceEditUser>>, {data: V1EditUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  userServiceEditUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UserServiceEditUserMutationResult = NonNullable<Awaited<ReturnType<typeof userServiceEditUser>>>
    export type UserServiceEditUserMutationBody = V1EditUserRequest
    export type UserServiceEditUserMutationError = AxiosError<RpcStatus>

    export const useUserServiceEditUser = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userServiceEditUser>>, TError,{data: V1EditUserRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof userServiceEditUser>>,
        TError,
        {data: V1EditUserRequest},
        TContext
      > => {

      const mutationOptions = getUserServiceEditUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const userServiceUnfollowUser = (
    targetUserId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/users/${targetUserId}/follow`,options
    );
  }



export const getUserServiceUnfollowUserMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userServiceUnfollowUser>>, TError,{targetUserId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof userServiceUnfollowUser>>, TError,{targetUserId: string}, TContext> => {

const mutationKey = ['userServiceUnfollowUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userServiceUnfollowUser>>, {targetUserId: string}> = (props) => {
          const {targetUserId} = props ?? {};

          return  userServiceUnfollowUser(targetUserId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UserServiceUnfollowUserMutationResult = NonNullable<Awaited<ReturnType<typeof userServiceUnfollowUser>>>
    
    export type UserServiceUnfollowUserMutationError = AxiosError<RpcStatus>

    export const useUserServiceUnfollowUser = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userServiceUnfollowUser>>, TError,{targetUserId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof userServiceUnfollowUser>>,
        TError,
        {targetUserId: string},
        TContext
      > => {

      const mutationOptions = getUserServiceUnfollowUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const userServiceFollowUser = (
    targetUserId: string,
    userServiceFollowUserBody: UserServiceFollowUserBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/users/${targetUserId}/follow`,
      userServiceFollowUserBody,options
    );
  }



export const getUserServiceFollowUserMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userServiceFollowUser>>, TError,{targetUserId: string;data: UserServiceFollowUserBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof userServiceFollowUser>>, TError,{targetUserId: string;data: UserServiceFollowUserBody}, TContext> => {

const mutationKey = ['userServiceFollowUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userServiceFollowUser>>, {targetUserId: string;data: UserServiceFollowUserBody}> = (props) => {
          const {targetUserId,data} = props ?? {};

          return  userServiceFollowUser(targetUserId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UserServiceFollowUserMutationResult = NonNullable<Awaited<ReturnType<typeof userServiceFollowUser>>>
    export type UserServiceFollowUserMutationBody = UserServiceFollowUserBody
    export type UserServiceFollowUserMutationError = AxiosError<RpcStatus>

    export const useUserServiceFollowUser = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userServiceFollowUser>>, TError,{targetUserId: string;data: UserServiceFollowUserBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof userServiceFollowUser>>,
        TError,
        {targetUserId: string;data: UserServiceFollowUserBody},
        TContext
      > => {

      const mutationOptions = getUserServiceFollowUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary „É¶„Éº„Ç∂„ÉºÊìç‰Ωú
 */
export const userServiceGetUserByID = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetUserByIDResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/users/${userId}`,options
    );
  }


export const getUserServiceGetUserByIDQueryKey = (userId?: string,) => {
    return [`/api/v1/users/${userId}`] as const;
    }

    
export const getUserServiceGetUserByIDQueryOptions = <TData = Awaited<ReturnType<typeof userServiceGetUserByID>>, TError = AxiosError<RpcStatus>>(userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userServiceGetUserByID>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUserServiceGetUserByIDQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userServiceGetUserByID>>> = ({ signal }) => userServiceGetUserByID(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof userServiceGetUserByID>>, TError, TData> & { queryKey: QueryKey }
}

export type UserServiceGetUserByIDQueryResult = NonNullable<Awaited<ReturnType<typeof userServiceGetUserByID>>>
export type UserServiceGetUserByIDQueryError = AxiosError<RpcStatus>


/**
 * @summary „É¶„Éº„Ç∂„ÉºÊìç‰Ωú
 */

export function useUserServiceGetUserByID<TData = Awaited<ReturnType<typeof userServiceGetUserByID>>, TError = AxiosError<RpcStatus>>(
 userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userServiceGetUserByID>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getUserServiceGetUserByIDQueryOptions(userId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
