/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * event.proto
 * OpenAPI spec version: version not set
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  RpcStatus,
  V1CreateEventRequest,
  V1EditEventRequest,
  V1GetEventByIDResponse,
  V1GetEventsRequest,
  V1GetEventsResponse,
  V1StandardResponse
} from './event.schemas.ts';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const eventServiceGetEvents = (
    v1GetEventsRequest: V1GetEventsRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetEventsResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/events`,
      v1GetEventsRequest,options
    );
  }



export const getEventServiceGetEventsMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventServiceGetEvents>>, TError,{data: V1GetEventsRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof eventServiceGetEvents>>, TError,{data: V1GetEventsRequest}, TContext> => {

const mutationKey = ['eventServiceGetEvents'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventServiceGetEvents>>, {data: V1GetEventsRequest}> = (props) => {
          const {data} = props ?? {};

          return  eventServiceGetEvents(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EventServiceGetEventsMutationResult = NonNullable<Awaited<ReturnType<typeof eventServiceGetEvents>>>
    export type EventServiceGetEventsMutationBody = V1GetEventsRequest
    export type EventServiceGetEventsMutationError = AxiosError<RpcStatus>

    export const useEventServiceGetEvents = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventServiceGetEvents>>, TError,{data: V1GetEventsRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof eventServiceGetEvents>>,
        TError,
        {data: V1GetEventsRequest},
        TContext
      > => {

      const mutationOptions = getEventServiceGetEventsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
export const eventServiceCreateEvent = (
    v1CreateEventRequest: V1CreateEventRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/events/create`,
      v1CreateEventRequest,options
    );
  }



export const getEventServiceCreateEventMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventServiceCreateEvent>>, TError,{data: V1CreateEventRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof eventServiceCreateEvent>>, TError,{data: V1CreateEventRequest}, TContext> => {

const mutationKey = ['eventServiceCreateEvent'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventServiceCreateEvent>>, {data: V1CreateEventRequest}> = (props) => {
          const {data} = props ?? {};

          return  eventServiceCreateEvent(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EventServiceCreateEventMutationResult = NonNullable<Awaited<ReturnType<typeof eventServiceCreateEvent>>>
    export type EventServiceCreateEventMutationBody = V1CreateEventRequest
    export type EventServiceCreateEventMutationError = AxiosError<RpcStatus>

    export const useEventServiceCreateEvent = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventServiceCreateEvent>>, TError,{data: V1CreateEventRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof eventServiceCreateEvent>>,
        TError,
        {data: V1CreateEventRequest},
        TContext
      > => {

      const mutationOptions = getEventServiceCreateEventMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
export const eventServiceDeleteEvent = (
    eventId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/events/delete/${eventId}`,options
    );
  }



export const getEventServiceDeleteEventMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventServiceDeleteEvent>>, TError,{eventId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof eventServiceDeleteEvent>>, TError,{eventId: string}, TContext> => {

const mutationKey = ['eventServiceDeleteEvent'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventServiceDeleteEvent>>, {eventId: string}> = (props) => {
          const {eventId} = props ?? {};

          return  eventServiceDeleteEvent(eventId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EventServiceDeleteEventMutationResult = NonNullable<Awaited<ReturnType<typeof eventServiceDeleteEvent>>>
    
    export type EventServiceDeleteEventMutationError = AxiosError<RpcStatus>

    export const useEventServiceDeleteEvent = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventServiceDeleteEvent>>, TError,{eventId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof eventServiceDeleteEvent>>,
        TError,
        {eventId: string},
        TContext
      > => {

      const mutationOptions = getEventServiceDeleteEventMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
export const eventServiceEditEvent = (
    v1EditEventRequest: V1EditEventRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/events/edit`,
      v1EditEventRequest,options
    );
  }



export const getEventServiceEditEventMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventServiceEditEvent>>, TError,{data: V1EditEventRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof eventServiceEditEvent>>, TError,{data: V1EditEventRequest}, TContext> => {

const mutationKey = ['eventServiceEditEvent'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventServiceEditEvent>>, {data: V1EditEventRequest}> = (props) => {
          const {data} = props ?? {};

          return  eventServiceEditEvent(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EventServiceEditEventMutationResult = NonNullable<Awaited<ReturnType<typeof eventServiceEditEvent>>>
    export type EventServiceEditEventMutationBody = V1EditEventRequest
    export type EventServiceEditEventMutationError = AxiosError<RpcStatus>

    export const useEventServiceEditEvent = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventServiceEditEvent>>, TError,{data: V1EditEventRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof eventServiceEditEvent>>,
        TError,
        {data: V1EditEventRequest},
        TContext
      > => {

      const mutationOptions = getEventServiceEditEventMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
export const eventServiceGetEventByID = (
    eventId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetEventByIDResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/events/${eventId}`,options
    );
  }




export const getEventServiceGetEventByIDQueryKey = (eventId?: string,) => {
    return [
    `/api/v1/events/${eventId}`
    ] as const;
    }

    
export const getEventServiceGetEventByIDQueryOptions = <TData = Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError = AxiosError<RpcStatus>>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventServiceGetEventByIDQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventServiceGetEventByID>>> = ({ signal }) => eventServiceGetEventByID(eventId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EventServiceGetEventByIDQueryResult = NonNullable<Awaited<ReturnType<typeof eventServiceGetEventByID>>>
export type EventServiceGetEventByIDQueryError = AxiosError<RpcStatus>


export function useEventServiceGetEventByID<TData = Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError = AxiosError<RpcStatus>>(
 eventId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof eventServiceGetEventByID>>,
          TError,
          Awaited<ReturnType<typeof eventServiceGetEventByID>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEventServiceGetEventByID<TData = Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError = AxiosError<RpcStatus>>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof eventServiceGetEventByID>>,
          TError,
          Awaited<ReturnType<typeof eventServiceGetEventByID>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEventServiceGetEventByID<TData = Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError = AxiosError<RpcStatus>>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useEventServiceGetEventByID<TData = Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError = AxiosError<RpcStatus>>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventServiceGetEventByID>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEventServiceGetEventByIDQueryOptions(eventId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
