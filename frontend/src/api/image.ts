/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * image.proto
 * OpenAPI spec version: version not set
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  RpcStatus,
  V1UploadImageRequest,
  V1UploadImageResponse
} from './';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const imageServiceUploadImage = (
    v1UploadImageRequest: V1UploadImageRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1UploadImageResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/images/upload`,
      v1UploadImageRequest,options
    );
  }



export const getImageServiceUploadImageMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof imageServiceUploadImage>>, TError,{data: V1UploadImageRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof imageServiceUploadImage>>, TError,{data: V1UploadImageRequest}, TContext> => {

const mutationKey = ['imageServiceUploadImage'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof imageServiceUploadImage>>, {data: V1UploadImageRequest}> = (props) => {
          const {data} = props ?? {};

          return  imageServiceUploadImage(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ImageServiceUploadImageMutationResult = NonNullable<Awaited<ReturnType<typeof imageServiceUploadImage>>>
    export type ImageServiceUploadImageMutationBody = V1UploadImageRequest
    export type ImageServiceUploadImageMutationError = AxiosError<RpcStatus>

    export const useImageServiceUploadImage = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof imageServiceUploadImage>>, TError,{data: V1UploadImageRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof imageServiceUploadImage>>,
        TError,
        {data: V1UploadImageRequest},
        TContext
      > => {

      const mutationOptions = getImageServiceUploadImageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
