/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * post.proto
 * OpenAPI spec version: version not set
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  PostServiceGetPostsParams,
  RpcStatus,
  V1CreatePostRequest,
  V1EditPostRequest,
  V1GetPostsByUserIDResponse,
  V1GetPostsResponse,
  V1StandardResponse
} from './post.schemas.ts';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary ÊäïÁ®øÊìç‰Ωú
 */
export const postServiceGetPosts = (
    params?: PostServiceGetPostsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetPostsResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/posts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getPostServiceGetPostsQueryKey = (params?: PostServiceGetPostsParams,) => {
    return [`/api/v1/posts`, ...(params ? [params]: [])] as const;
    }

    
export const getPostServiceGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof postServiceGetPosts>>, TError = AxiosError<RpcStatus>>(params?: PostServiceGetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPosts>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostServiceGetPostsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postServiceGetPosts>>> = ({ signal }) => postServiceGetPosts(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPosts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PostServiceGetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof postServiceGetPosts>>>
export type PostServiceGetPostsQueryError = AxiosError<RpcStatus>


export function usePostServiceGetPosts<TData = Awaited<ReturnType<typeof postServiceGetPosts>>, TError = AxiosError<RpcStatus>>(
 params: undefined |  PostServiceGetPostsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPosts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postServiceGetPosts>>,
          TError,
          Awaited<ReturnType<typeof postServiceGetPosts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostServiceGetPosts<TData = Awaited<ReturnType<typeof postServiceGetPosts>>, TError = AxiosError<RpcStatus>>(
 params?: PostServiceGetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPosts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postServiceGetPosts>>,
          TError,
          Awaited<ReturnType<typeof postServiceGetPosts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostServiceGetPosts<TData = Awaited<ReturnType<typeof postServiceGetPosts>>, TError = AxiosError<RpcStatus>>(
 params?: PostServiceGetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPosts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÊäïÁ®øÊìç‰Ωú
 */

export function usePostServiceGetPosts<TData = Awaited<ReturnType<typeof postServiceGetPosts>>, TError = AxiosError<RpcStatus>>(
 params?: PostServiceGetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPosts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPostServiceGetPostsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postServiceCreatePost = (
    v1CreatePostRequest: V1CreatePostRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/posts/create`,
      v1CreatePostRequest,options
    );
  }



export const getPostServiceCreatePostMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceCreatePost>>, TError,{data: V1CreatePostRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postServiceCreatePost>>, TError,{data: V1CreatePostRequest}, TContext> => {

const mutationKey = ['postServiceCreatePost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServiceCreatePost>>, {data: V1CreatePostRequest}> = (props) => {
          const {data} = props ?? {};

          return  postServiceCreatePost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServiceCreatePostMutationResult = NonNullable<Awaited<ReturnType<typeof postServiceCreatePost>>>
    export type PostServiceCreatePostMutationBody = V1CreatePostRequest
    export type PostServiceCreatePostMutationError = AxiosError<RpcStatus>

    export const usePostServiceCreatePost = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceCreatePost>>, TError,{data: V1CreatePostRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postServiceCreatePost>>,
        TError,
        {data: V1CreatePostRequest},
        TContext
      > => {

      const mutationOptions = getPostServiceCreatePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postServiceDeletePost = (
    postId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.delete(
      `/api/v1/posts/delete/${postId}`,options
    );
  }



export const getPostServiceDeletePostMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceDeletePost>>, TError,{postId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postServiceDeletePost>>, TError,{postId: string}, TContext> => {

const mutationKey = ['postServiceDeletePost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServiceDeletePost>>, {postId: string}> = (props) => {
          const {postId} = props ?? {};

          return  postServiceDeletePost(postId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServiceDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof postServiceDeletePost>>>
    
    export type PostServiceDeletePostMutationError = AxiosError<RpcStatus>

    export const usePostServiceDeletePost = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceDeletePost>>, TError,{postId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postServiceDeletePost>>,
        TError,
        {postId: string},
        TContext
      > => {

      const mutationOptions = getPostServiceDeletePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postServiceEditPost = (
    v1EditPostRequest: V1EditPostRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1StandardResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/posts/edit`,
      v1EditPostRequest,options
    );
  }



export const getPostServiceEditPostMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceEditPost>>, TError,{data: V1EditPostRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postServiceEditPost>>, TError,{data: V1EditPostRequest}, TContext> => {

const mutationKey = ['postServiceEditPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postServiceEditPost>>, {data: V1EditPostRequest}> = (props) => {
          const {data} = props ?? {};

          return  postServiceEditPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostServiceEditPostMutationResult = NonNullable<Awaited<ReturnType<typeof postServiceEditPost>>>
    export type PostServiceEditPostMutationBody = V1EditPostRequest
    export type PostServiceEditPostMutationError = AxiosError<RpcStatus>

    export const usePostServiceEditPost = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postServiceEditPost>>, TError,{data: V1EditPostRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postServiceEditPost>>,
        TError,
        {data: V1EditPostRequest},
        TContext
      > => {

      const mutationOptions = getPostServiceEditPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postServiceGetPostsByUserID = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetPostsByUserIDResponse>> => {
    
    
    return axios.default.get(
      `/api/v1/posts/${userId}/posts`,options
    );
  }


export const getPostServiceGetPostsByUserIDQueryKey = (userId?: string,) => {
    return [`/api/v1/posts/${userId}/posts`] as const;
    }

    
export const getPostServiceGetPostsByUserIDQueryOptions = <TData = Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError = AxiosError<RpcStatus>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostServiceGetPostsByUserIDQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postServiceGetPostsByUserID>>> = ({ signal }) => postServiceGetPostsByUserID(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PostServiceGetPostsByUserIDQueryResult = NonNullable<Awaited<ReturnType<typeof postServiceGetPostsByUserID>>>
export type PostServiceGetPostsByUserIDQueryError = AxiosError<RpcStatus>


export function usePostServiceGetPostsByUserID<TData = Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError = AxiosError<RpcStatus>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postServiceGetPostsByUserID>>,
          TError,
          Awaited<ReturnType<typeof postServiceGetPostsByUserID>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostServiceGetPostsByUserID<TData = Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError = AxiosError<RpcStatus>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postServiceGetPostsByUserID>>,
          TError,
          Awaited<ReturnType<typeof postServiceGetPostsByUserID>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostServiceGetPostsByUserID<TData = Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError = AxiosError<RpcStatus>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function usePostServiceGetPostsByUserID<TData = Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError = AxiosError<RpcStatus>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postServiceGetPostsByUserID>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPostServiceGetPostsByUserIDQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
