/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * auth.proto
 * OpenAPI spec version: version not set
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  RpcStatus,
  V1AuthResponse,
  V1SignInRequest,
  V1SignUpRequest
} from './auth.schemas.ts';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const authServiceSignIn = (
    v1SignInRequest: V1SignInRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1AuthResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/auth/signin`,
      v1SignInRequest,options
    );
  }



export const getAuthServiceSignInMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authServiceSignIn>>, TError,{data: V1SignInRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authServiceSignIn>>, TError,{data: V1SignInRequest}, TContext> => {

const mutationKey = ['authServiceSignIn'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authServiceSignIn>>, {data: V1SignInRequest}> = (props) => {
          const {data} = props ?? {};

          return  authServiceSignIn(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthServiceSignInMutationResult = NonNullable<Awaited<ReturnType<typeof authServiceSignIn>>>
    export type AuthServiceSignInMutationBody = V1SignInRequest
    export type AuthServiceSignInMutationError = AxiosError<RpcStatus>

    export const useAuthServiceSignIn = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authServiceSignIn>>, TError,{data: V1SignInRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof authServiceSignIn>>,
        TError,
        {data: V1SignInRequest},
        TContext
      > => {

      const mutationOptions = getAuthServiceSignInMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ë™çË®ºÊìç‰Ωú
 */
export const authServiceSignUp = (
    v1SignUpRequest: V1SignUpRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1AuthResponse>> => {
    
    
    return axios.default.post(
      `/api/v1/auth/signup`,
      v1SignUpRequest,options
    );
  }



export const getAuthServiceSignUpMutationOptions = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authServiceSignUp>>, TError,{data: V1SignUpRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authServiceSignUp>>, TError,{data: V1SignUpRequest}, TContext> => {

const mutationKey = ['authServiceSignUp'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authServiceSignUp>>, {data: V1SignUpRequest}> = (props) => {
          const {data} = props ?? {};

          return  authServiceSignUp(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthServiceSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof authServiceSignUp>>>
    export type AuthServiceSignUpMutationBody = V1SignUpRequest
    export type AuthServiceSignUpMutationError = AxiosError<RpcStatus>

    /**
 * @summary Ë™çË®ºÊìç‰Ωú
 */
export const useAuthServiceSignUp = <TError = AxiosError<RpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authServiceSignUp>>, TError,{data: V1SignUpRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof authServiceSignUp>>,
        TError,
        {data: V1SignUpRequest},
        TContext
      > => {

      const mutationOptions = getAuthServiceSignUpMutationOptions(options);

      return useMutation(mutationOptions );
    }
